# ðŸ“Œ Step 1: Install Required Libraries
!pip install openpyxl fpdf

# ðŸ“Œ Step 2: Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from fpdf import FPDF
import os

# ðŸ“Œ Step 3: Upload the dataset (from your local machine)
from google.colab import files
uploaded = files.upload()  # Upload 'adult 3.xlsx'

# ðŸ“Œ Step 4: Load and preprocess the dataset
df = pd.read_excel(next(iter(uploaded)))
df = df.dropna()

label_encoders = {}
for column in df.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    df[column] = le.fit_transform(df[column])
    label_encoders[column] = le

# Identify target column
target_candidates = ['income', 'salary', 'Income', 'Salary', 'class', 'target']
target = next((col for col in target_candidates if col in df.columns), None)
if not target:
    raise ValueError("Target column not found.")

X = df.drop(columns=[target])
y = df[target]

# Train/test split and scaling
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train Random Forest model
model = RandomForestClassifier(random_state=42)
model.fit(X_train_scaled, y_train)
y_pred = model.predict(X_test_scaled)

# ðŸ“Œ Step 5: Generate Graphs and Save Images

image_paths = {}

# 1. Pie Chart
target_counts = y.value_counts()
labels = [str(label) for label in target_counts.index]
plt.figure(figsize=(6, 6))
plt.pie(target_counts, labels=labels, autopct='%1.1f%%', startangle=140, colors=sns.color_palette('pastel'))
plt.title('Distribution of Salary Categories')
plt.savefig('pie_chart_salary_distribution.png')
plt.close()

# 2. Bar Plot â€“ Average Age by Salary
if 'age' in df.columns:
    age_salary_group = df.groupby(target)['age'].mean().reset_index()
    plt.figure(figsize=(7, 4))
    sns.barplot(x=target, y='age', data=age_salary_group, palette='Blues')
    plt.title('Average Age by Salary Category')
    plt.savefig('bar_plot_avg_age_by_salary.png')
    plt.close()

# 3. Histogram â€“ Age Distribution
if 'age' in df.columns:
    plt.figure(figsize=(8, 5))
    sns.histplot(df['age'], bins=30, kde=True, color='skyblue')
    plt.title('Age Distribution')
    plt.savefig('histogram_age_distribution.png')
    plt.close()

# 4. Feature Importance
importances = model.feature_importances_
features = X.columns
importance_df = pd.DataFrame({'Feature': features, 'Importance': importances})
importance_df = importance_df.sort_values(by='Importance', ascending=False)
plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=importance_df, palette='viridis')
plt.title('Feature Importance')
plt.tight_layout()
plt.savefig('feature_importance_bar_chart.png')
plt.close()

# 5. Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 5))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Oranges')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.savefig('confusion_matrix.png')
plt.close()

# ðŸ“Œ Step 6: Classification Report
report_text = classification_report(y_test, y_pred)

# ðŸ“Œ Step 7: Generate PDF Report
pdf = FPDF()
pdf.set_auto_page_break(auto=True, margin=15)
pdf.add_page()
pdf.set_font("Arial", 'B', 16)
pdf.cell(0, 10, "Salary Prediction ML Report", ln=True, align='C')
pdf.ln(10)

# Intro
pdf.set_font("Arial", size=12)
pdf.multi_cell(0, 10, "This report summarizes the machine learning model built to predict salary categories using the dataset 'adult 3.xlsx'. The analysis includes visualizations, feature importance, and model evaluation metrics.")
pdf.ln(5)

# Pie Chart
pdf.set_font("Arial", 'B', 14)
pdf.cell(0, 10, "1. Salary Category Distribution", ln=True)
pdf.image('pie_chart_salary_distribution.png', w=150)
pdf.ln(10)

# Bar Chart
pdf.set_font("Arial", 'B', 14)
pdf.cell(0, 10, "2. Average Age by Salary Category", ln=True)
pdf.image('bar_plot_avg_age_by_salary.png', w=150)
pdf.ln(10)

# Histogram
pdf.set_font("Arial", 'B', 14)
pdf.cell(0, 10, "3. Age Distribution", ln=True)
pdf.image('histogram_age_distribution.png', w=150)
pdf.ln(10)

# Feature Importance
pdf.set_font("Arial", 'B', 14)
pdf.cell(0, 10, "4. Feature Importance", ln=True)
pdf.image('feature_importance_bar_chart.png', w=150)
pdf.ln(10)

# Confusion Matrix
pdf.set_font("Arial", 'B', 14)
pdf.cell(0, 10, "5. Confusion Matrix", ln=True)
pdf.image('confusion_matrix.png', w=150)
pdf.ln(10)

# Classification Report
pdf.set_font("Arial", 'B', 14)
pdf.cell(0, 10, "6. Classification Report", ln=True)
pdf.set_font("Courier", size=10)
for line in report_text.split('\n'):
    pdf.multi_cell(0, 5, line)

pdf_path = "salary_prediction_report.pdf"
pdf.output(pdf_path)

# ðŸ“Œ Step 8: Download the PDF and Images
from google.colab import files
files.download(pdf_path)
files.download("pie_chart_salary_distribution.png")
files.download("bar_plot_avg_age_by_salary.png")
files.download("histogram_age_distribution.png")
files.download("feature_importance_bar_chart.png")
files.download("confusion_matrix.png")
